<?php
bolt_decrypt( __FILE__ , 'IchEk3'); return 0;
##!!!##