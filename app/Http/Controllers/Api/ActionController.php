<?php
bolt_decrypt( __FILE__ , 'BJKGUx'); return 0;
##!!!##